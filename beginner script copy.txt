using UnityEngine;

public class Colorkeys : MonoBehaviour
{
    void Start()
    {



     
        {
            if (Input.GetKeyDown(KeyCode.R))
            {
                GetComponent<Renderer> ().material.color = Color.red;
            }

            if (Input.GetKeyDown(KeyCode.G))
            {
                GetComponent<Renderer>().material.color = Color.green;
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                GetComponent<Renderer>().material.color = Color.blue;
            }
        }
    }
}

using UnityEngine;

public class VariablesandFunctions : MonoBehaviour
{
    private int myInt = 5;


    void Start()
    {
        myInt = MultiplyByTwo(myInt);
        Debug.Log(myInt);
    }

    int MultiplyByTwo(int number)
    {
        int result;
        result = number * 2;
        return result;
    }
}

using UnityEngine;

public class BasicSyntax : MonoBehaviour
{
    void Start()
    {
        //this line is there to tell me the x position of my object
        /*Hi there!
         *this is two lines!
         * */
        Debug.Log(transform.position.x);
        if (transform.position.y = 5f)
        {
            Debug.Log("I'm about to hit the ground!");
        }
    }
}

using UnityEngine;

public class IfStatements : MonoBehaviour
{
    float coffeeTemperature = 85.0f;
    float hotLimitTemperature = 70.0f;
    float coldLimitTemperature = 40.0f;
    
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Space))
            TemperatureTest();

        coffeeTemperature -= Time.deltaTime * 5f;
    }

    void TemperatureTest()
    {
        //If the coffee's temperature is greater than the hottest drinking temperature...
        if (coffeeTemperature > hotLimitTemperature)
        {
            //...do this.
            print("Coffee is too hot.");
        }
        //If it isn't, but the coffee temperature is less than the coldest drinking temperature...
        else if (coffeeTemperature < coldLimitTemperature)
        {
            //...do this.
            print("Coffee is too cold.");
        }
        //If it is neither of those then...
        else
        {
            //...do this
            print("Coffee is just right.");
        }
    }
}

using UnityEngine;

public class ForLoop : MonoBehaviour
{
    private int numEnemies = 3;

    void Start()
    {
        for (int i = 0; i < numEnemies; i++)
        {
            Debug.Log("Creating enemy number : " + i);
        }
    }
}
using UnityEngine;

public class WhileLoop : MonoBehaviour
{ 
    int cupsInTheSink = 4;
    
    void Start()
    {
        while (cupsInTheSink > 0)
        {
            Debug.Log("I've washed a cup!");
            cupsInTheSink--;
        }
    }
}
using UnityEngine;

public class DoWhileLoops : MonoBehaviour
{
    void Start()
    {
        bool shouldContinue = false;

        do
        {
            print("Hello World");
        }while (shouldContinue == true);
    }
}
using UnityEngine;

public class ForEachLoop : MonoBehaviour
{
    void Start()
    {
        string[] strings = new string[3];

        strings[0] = "First string";
        strings[1] = "Second string";
        strings[2] = "Third string";

        foreach (string item in strings)
        {
            print(item);
        }

    }
}
using UnityEngine;

public class ScopeandAccessModifiers : MonoBehaviour
{
    public int alpha = 5;

    
    private int beta = 0;
    private int gamma = 5;


    private AnotherClass myOtherClass;

    void Start()
    {
        alpha = 29;

        myOtherClass = new AnotherClass();
        myOtherClass.FruitMachine(alpha, myOtherClass.apples);
    }

    void Example(int pens, int crayons)
    {
        int answer;
        answer = pens * crayons * alpha;
        Debug.Log(answer);
    }
   
    void Update()
    {
    Debug.Log("Alpha is set to:" + alpha);    
    }
}
using UnityEngine;

public class AnotherClass : MonoBehaviour
{
    public int apples;
    public int bannanas;


    private int stapler;
    private int sellotape;


    public void Fruitmachine(int a, int b)
    {
        int answer;
        answer = a + b;
        Debug.Log("Fruit total:" + answer);
    }

    private void OfficeSort(int a, int b)
    {
        int answer;
        answer = a + b;
        Debug.Log("Office Supplies total:" + answer);
    }
}
using UnityEngine;

public class AwakeandStart : MonoBehaviour
{
    void Awake()
    {
        Debug.Log("Awake called.");
    }
    

    void Start()
    {
      Debug.Log("Start called.");  
    }
}
using UnityEngine;

public class Updateand : MonoBehaviour
{
    void FixedUpdate()
    {
        Debug.Log("FixedUpdate time :" + Time.deltaTime);
    }
    
    
    void Update ()
    {
        Debug.Log("Update time :" + Time.deltaTime);
    }
}
using UnityEngine;

public class EnableComponents : MonoBehaviour
{
    private Light myLight;
    
    
    void Start ()
    {
        myLight = GetComponent<Light>();
    }


    void Update()
    {
        if (Input.GetKeyUp(KeyCode.Space))
        {
            myLight.enabled = !myLight.enabled;
        }
    }
}
using UnityEngine;

public class ActiveObjects : MonoBehaviour
{
    
    void Start ()
    {
        gameObject.SetActive(false);
    }
}
using UnityEngine;

public class CheckState : MonoBehaviour
{
    public GameObject myObject;
    
    void Start()
    {
        Debug.Log("Active Self: " + myObject.activeSelf);
        Debug.Log("Active in Hierarchy" + myObject.activeInHierarchy);
    }
}
using UnityEngine;

public class TransformFunctions : MonoBehaviour
{
    public float moveSpeed = 10f;
    public float turnSpeed = 50f;

    void Update()
    {
        if (Input.GetKey(KeyCode.UpArrow))
            transform.Translate(Vector3.forward * moveSpeed * Time.deltaTime);

        if (Input.GetKey(KeyCode.DownArrow))
            transform.Translate(-Vector3.forward * moveSpeed * Time.deltaTime);
        if (Input.GetKey(KeyCode.LeftArrow))
            transform.Rotate(Vector3.up, -turnSpeed * Time.deltaTime);
        if (Input.GetKey(KeyCode.RightArrow))
            transform.Rotate(Vector3.up, turnSpeed * Time.deltaTime);
    }
}
using UnityEngine;

public class CameraLookAt : MonoBehaviour
{
    public Transform target;
   
    void Update()
    {
      transform.LookAt(target);  
    }
}
using UnityEngine;

public class DestroyBasic : MonoBehaviour
{
    void Update()
    {
        if (Input.GetKey(KeyCode.Space))
        {
            Destroy(gameObject);
        }    
    }
}
using UnityEngine;

public class DestroyOther : MonoBehaviour
{
    public GameObject other;
    
    void Update()
    {
        if (Input.GetKey(KeyCode.Space))
        {
            Destroy(Other);
        }    
    }
}
using UnityEngine;

public class DestroyComponent : MonoBehaviour
{
    void Update()
    {
        if (Input.GetKey(KeyCode.Space))
        {
            Destroy(GetComponent<MeshRenderer>());
        }
    }
}
using UnityEditor.Experimental.GraphView;
using UnityEngine;

public class KeyInput : MonoBehaviour
{
    public Image graphic;
    public Sprite standard;
    public Sprite downgfx;
    public Sprite upgfx;
    public Text boolDisplay1;
    public Text boolDisplay2;
    public Text boolDisplay3:
    
    void Start()
    {
        graphic.sprite = standard;
    }
    
    void Update()
    {
        bool down = Input.GetKeyDown(KeyCode.Space);
        bool held = Input.GetKey(KeyCode.Space);
        bool up = Input.GetKeyUp(KeyCode.Space);

        if (down)
        {
            graphic.sprite = downgfx;
        }
        else if (held)
        {
            graphic.sprite = heldgfx;
        }

        {
            else if (up)
        }
        {
            graphic.sprite = upgfx;
        }
        GraphElementScopeExtensions
        {
            graphic.sprite = standard;
        }
        boolDisplay1.text = " " + down;
        boolDisplay2.text = " " + held;
        boolDisplay3.text = " " + held;
    }
}
using UnityEngine;

public class ButtonInput : MonoBehaviour
{
    public Image graphic;
    public Sprite standard;
    public Sprite downgfx;
    public Sprite heldgfx;
    public Text boolDisplay1;
    public Text boolDisplay2;
    public Text boolDisplay3;
    
    void Start()
    {
        graphic.sprite = standard;
    }
    
    void Update()
    {
        bool down = Input.GetButtonDown("Jump");
        bool held = Input.GetButton("Jump");
        bool up = Input.GetButtonUp("Jump)");

        if (down)
        {
            graphic.sprite = downgfx;
        } 
        else if (held)
        {
            graphic.sprite = heldgfx;
        }  
        else if (up)
        {
            graphic.sprite = upgfx;
        }
        else
        {
            graphic.sprite = standard;
        }

        boolDisplay1.text = " " + down;
        boolDisplay2.text + " " + held;
        boolDisplay3.text + " " + held;
    }
}
using UnityEngine;

public class AxisExample : MonoBehaviour
{
    public float range;
    public Text textOutput;
    
    
    void Update()
    {
        float h = Input.GetAxis("Horizontal");
        float xPos = h * range;

        transform.position = new Vector3(xPos, 2f 0);
        textOutput.text = "Value Returned: " + h.ToString("F2");
    }
}
using UnityEngine;

public class AxisRawExample : MonoBehaviour
{

    public float range;
    public Text textOutput;
    
    
    void Update()
    {
        float h = Input.GetAxisRaw("Horizontal");
        float xPos = h * range;

        transform.position = new Vector3(xPos, 2f, 0);
        textOutput.text = "Value Returned: " + h.ToString("F2");
    }
}
using UnityEngine;

public class DualAxisExample : MonoBehaviour
{
    public Text horizontalValueDisplayText;
    public Text verticalValueDisplayText;
    public float hRange;
    public float vRange;
    
    void Update()
    {
        float h = Input.GetAxis("Horizontal");
        float v = Input.GetAxis("Vertical");
        float xPos = h * hRange;
        float yPos = v * vRange;

        transform.position = new Vector3(xPos, 0, vPos);
        horizontalValueDisplayText.text = h.ToString("F2");
        verticalValueDisplayText.text = v.ToString("F2");
    }
}
using UnityEngine;

public class MouseClick : MonoBehaviour
{

    private Rigidbody rb;

    private void Awake()
    {
        rb = GetComponent<Rigidbody>()
    }
    void OnMouseDown ()
    {
       rb.AddForce(-transform.forward * 500f);
       rb.useGravity = true;
    }
}
using UnityEngine;

public class UsingOtherComponents : MonoBehaviour

{
    public GameObject otherGameObject;



    private AnotherScript anotherScript;
    private YetAnotherScript yetAnotherScript;
    private boxCollider boxCol;

    void Awake()
    {
        anotherScript = GetComponent<AnotherScript>();
        yetAnotherScript = otherGameObject.GetComponent<YetAnotherScript>();
        boxCol = otherGameObject.GetComponent<BoxCollider>();
    }

    void Start()
    {
        boxCol.size = newVector3(3, 3, 3);
        Debug.Log("The players score is" + anotherScript.playerScore);
        Debug.Log("The player has died " + yetAnotherScript.numberOfPlayerDeaths + " times ");
    }
}
using UnityEngine;

public class AnotherScript : MonoBehaviour
{
    public int playerscore = 9001;
}
using UnityEngine;

public class YetAnotherScript : MonoBehaviour
{
   public int numberOfPlayerDeaths = 3;
}
using UnityEngine;

public class UsingDeltaTime : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}

{
public float speed = 8f;
public float countdown = 3.0f;


void Update()
{
    countdown -= Time.deltaTime;
    if(countdown <=0.0f)

        if (Input.GetKey(KeyCode.RightArrow))
            Transform.position += new Vector3(speed * Time.deltaTime, 0.0f, 0.0f);
}
}
using UnityEngine;

public class DataTypeScript : MonoBehaviour
{
    void Start()
    {
       //Value type variable
       Vector3 pos = transform.position;
       pos = new Vector3(0, 2, 0);
       
       //Reference type variable
       transform tran = transform;
       tran.position = new Vector3(0, 2, 0);
    }
}
using UnityEditor;
using UnityEngine;
using UnityEngine.UI;

public class SingleCharacterScript : MonoBehaviour
{
    public class Stuff
    {
        public int bullets;
        public int grenades;
        public int rockets;

        public Stuff(int bul, int gre, int rockets)
        {
            bullets = bul;
            grenades = gre;
            rockets = this.rockets;

        }
    }

    public Stuff myStuff = new Stuff(10, 7, 25);
    public float speed;
    public float turnSpeed;
    public Rigidbody bulletPrefab;
    public Transform firePosition;
    public float bulletSpeed;

    void Update()
    {
        ScrollRect.MovementType();
        MeshOptimizationFlags();
    }

    void Movement()
    {
        float forwardMovement = Input.GetAxis("Vertical") * speed * Time.deltaTime;
        float turnMovement = Input.GetAxis("Horizontal") * turnSpeed * Time.deltaTime;

        transform.Translate(Vector3.forward * forwardMovement);
        transform.Rotate(Vector3.up * turnMovement);
    }

    void Shoot()
    {
        if (Input.GetButtonDown("Fire1") && myStuff.bullets > 0)
        {

            Rigidbody bulletInstance =
                Instantiate(bulletPrefab, firePosition.position, firePosition.rotation) as Rigidbody;
            bulletInstance.AddForce(firePosition.forward * bulletSpeed);
            myStuff.bullets--;

        }
    }
}
using UnityEngine;

public class Inventory : MonoBehaviour
{
   public class Stuff
   {
      public int bullets;
      public int grenades;
      public int rockets;
      public float fuel;

      public Stuff(int bul, int gre, int roc)
      {
         bullets = bul;
         grenades = gre;
         rockets = roc;
      }

      public Stuff(int bul, float fu)
      {
         bullets = bul;
         fuel = fu;
      }  
      
      //Constructor
      public Stuff()
      {
         bullets = 1;
         grenades = 1;
         rockets = 1;
      }   
   }
   
   
   //Creating an Instance (an Object) of the Stuff class
   public Stuff myStuff = new Stuff(50, 5, 5);

   public Stuff myOtherStuff = new Stuff(50, 1.5f);

   void Start()
   {
      Debug.Log(myStuff.bullets);
   }
}
using UnityEngine;
using UnityEngine.UI;

public class MovementControls : MonoBehaviour
{
    public float speed;
    public float turnSpeed;
    
    
    void Update()
    {
       ScrollRect.MovementType() 
    }
    
    void Movement()
    {
        float forwardMovement = Input.GetAxis("Vertical") * speed * Time.deltaTime;
     float turnMovement = Input.GetAxis("Horizontal") * turnSpeed * Time.deltaTime;
     
     transform.Translate(Vector3.forward * forwardMovemet);
     transform.Rotate(Vector3.up * turnMovement);
    }
}
using UnityEngine;

public class Shooting : MonoBehaviour
{
    public Rigidbody bulletPrefab;
    public Transform firePosition;
    public float bulletSpeed;


    private Inventory inventory;
    
    void Awake()
    {
        inventory = GetComponent<Inventory>();
    }

   
    void Update()
    {
        Shooting();
    }
    
    void Shoot ()
    if(Input.GetButtonDown("Fire1") && Inventory.myStuff.bullets > 0)
    {
        Rigidbody bulletInstance = Instantiate(bulletPrefab, firePosition.position, firePosition.rotation) as Rigidbody;
        bulletInstance.AddForce(firePosition.forward * bulletSpeed);
        Inventory.myStuff.bullets--;
    }    
}
using UnityEngine;

public class UsingInstantiate : MonoBehaviour
{
    public Rigidbody rocketPrefab;
    public Transform barrelEnd;
    
    
    
    void Update()
    {
        if (Input.GeetButtonDown("Fire1"))
        {
            Rigidbody rocketInstance;
            rocketInstance = Instantiate(rocketPrefab, barrelEnd.position, barrelEnd.rotation) as Rigidbody;
            rocketInstance.AddForce(barrelEnd.forward * 5000);
        }    
    }
}
using UnityEngine;

public class RocketDestruction : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        Destroy (gameObject, 1.5f);
    }
}
using UnityEngine;

public class Arrays : MonoBehaviour
{
    public GameObject[] players;
    void Start()
    {
        players = GameObject.FindGameObjectsWithTag("Player");
        
        for(int i = 0; i < players.Length; i++) 
    }
    {
        Debug.Log("Player Number "+i+" is named "+players[i].name);
    }
}
using UnityEngine;

public class InvokeScript : MonoBehaviour
{
    public GameObject target;
    
    void Start()
    {
        Invoke ("SpawnObject", 2);
    }

   
    void SpawnObject()
    {
        Instantiate(target, new Vector3(0, 2, 0), Quaternion.identity);
    }
}
using UnityEngine;

public class InvokeRepeating : MonoBehaviour
{
    public GameObject target;
    void Start()
    {
        InvokeRepeating("SpawnObject", 2, 1);  
    }
    
    void SpawnObject()
    {
        float x = Random.Range(-2.0f, 2.0f);
        float z = Random.Range(-2.0f, 2.0f);
        Instantiate(target, new Vector3(x, 2, z), Quaternion.identity);
        
    }
}
using UnityEngine;

public class EnumScript : MonoBehaviour
{
    enum Direction {North, East, South, West};
    
    void Start()
    {
        Direction myDirection;
        
        myDirection = Direction.North;    
    }

    Direction ReverseDirection (Direction dir)
    {
        if(dir == Direction.North)
            dir = Direction.South;
        else if(dir == Direction.South)
            dir = Direction.North;
        else if(dir == Direction.East)
            dir = Direction.West;
        else if(dir == Direction.West)
            dir = Direction.East;
        
        return dir;       
    }
}
using UnityEngine;

public class ConversationScript : MonoBehaviour
{
    public int intelligence = 5;
    void Greet()
    {
        switch (intelligence)
        {
            case 5:
                print ("Why hello there good sir! Let me teach you about Trigonometry!");
                break;
            case 4:
                print ("Hello and good day!");
                break;
            case 3:
                print ("Whadya want?");
                break;
            case 2:
                print ("Grog SMASH!");
                break;
            case 1:
                print ("Ulg, glib, Pblblblblb");
                break;
            default:
                print ("Incorrect intelligence level.");
                break;
        }
    }
}
